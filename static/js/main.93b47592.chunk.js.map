{"version":3,"sources":["components/common/Navbar.jsx","data/awsRegions.js","components/common/PopUp.jsx","components/map/Map.jsx","data/getAwsIpRanges.js","components/regions/RegionIpList.jsx","components/pages/MapPage.jsx","components/regions/RegionList.jsx","components/pages/ListPage.jsx","App.js","index.js"],"names":["Navbar","className","to","regions","name","niceName","countries","PopUp","props","handleClick","event","setClickedRegion","target","id","style","top","mousePosition","y","left","x","clickedCountry","code","map","region","onClick","uuidv4","Map","useState","setMousePosition","showPopup","setShowPopup","layerProps","setClickedCountry","attributes","value","classList","contains","nativeEvent","offsetX","offsetY","world","clickedRegion","a","fetch","res","json","data","ipv4","filterByRegion","ipv6","addType","addRowNo","type","prefixes","filter","prefix","ipv6_prefixes","count","no","getAwsIpRanges","RegionIpList","regionIpData","setRegionIpData","useEffect","setData","ref","regionIpListRef","Fragment","ip","ip_prefix","ipv6_prefix","service","network_border_group","MapPage","useRef","current","scrollIntoView","behavior","RegionList","Object","entries","key","ListPage","App","path","exact","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.93b47592.chunk.js","sourcesContent":["import React from 'react';\nimport './Navbar.css';\nimport { Link } from 'react-router-dom';\n\nfunction Navbar() {\n  return (\n    <div className=\"navbar\">\n      <Link to='/aws-regions/map'><button>Map</button></Link>\n\n      <div className=\"title\">\n        <h1>AWS Region IP Finder</h1>\n      </div>\n\n      <Link to='/aws-regions/list'><button>List</button></Link>\n    </div>\n  );\n}\n\nexport default Navbar;","const regions = {\n  'us': [\n    {name: 'us-east-1', niceName: 'N Virginia'},\n    {name: 'us-east-2', niceName: 'Ohio'},\n    {name: 'us-west-1', niceName: 'Northern California'},\n    {name: 'us-west-2', niceName: 'Oregon'},\n    {name: 'us-gov-east-1', niceName: 'AWS GovCloud (US-East)'},\n    {name: 'us-gov-west-1', niceName: 'AWS GovCloud (US-East)'}],\n  'za': \n    [{name: 'af-south-1', niceName: 'Cape Town'}],\n  'hk': \n    [{name: 'ap-east-1', niceName: 'Hong Kong'}],\n  'in': \n    [{name: 'ap-south-1', niceName: 'Mumbai'}],\n  'jp':\n    [{name: 'ap-northeast-3', niceName: 'Osaka-Local', 'ap-northeast-1': 'Tokyo' }],\n  'kr': [{name: 'ap-northeast-2', niceName: 'Seoul'}],\n  'sg': [{name: 'ap-southeast-1', niceName: 'Singapore'}],\n  'au': [{name: 'ap-southeast-2', niceName: 'Sydney'}],\n  'ca': [{name: 'ca-central-1', niceName: 'Canada'}],\n  'de': [{name: 'eu-central-1', niceName: 'Frankfurt'}],\n  'ie': [{name: 'eu-west-1', niceName: 'Ireland'}],\n  'gb': [{name: 'eu-west-2', niceName: 'London'}],\n  'it': [{name: 'eu-south-1', niceName: 'Milan'}],\n  'fr': [{name: 'eu-west-3', niceName: 'Paris'}],\n  'se': [{name: 'eu-north-1', niceName: 'Stockholm'}],\n  'bh': [{name: 'me-south-1', niceName: 'Bahrain'}],\n  'br': [{name: 'sa-east-1', niceName: 'Sao Paulo'}],\n};\n\nconst countries = \n{\n  'us': 'United States of America',\n  'za': 'South Africa',\n  'hk': 'Hong Kong',\n  'in': 'India',\n  'jp': 'Japan',\n  'kr': 'South Korea',\n  'sg': 'Singapore',\n  'au': 'Australia',\n  'ca': 'Canada',\n  'de': 'Germany',\n  'ie': 'Ireland',\n  'gb': 'United Kingdom',\n  'it': 'Italy',\n  'fr': 'France',\n  'se': 'Sweden',\n  'bh': 'Bahrain',\n  'br': 'Brazil',\n};\n\nexport {regions, countries};","import React from 'react';\nimport './PopUp.css';\nimport {regions} from '../../data/awsRegions';\nimport { v4 as uuidv4 } from 'uuid';\n\nfunction PopUp(props) {\n  function handleClick(event) {\n    props.setClickedRegion(event.target.id);\n  }\n\n  return (\n    <div\n      style={{ top: props.mousePosition.y + 20, left: props.mousePosition.x }}\n      className=\"popup-container popup\"\n    >\n      <h3 className=\"popup\">{props.clickedCountry.name}</h3>\n      {regions[props.clickedCountry.code].map((region) => {\n        return (\n          <p \n            key={uuidv4()}\n            id={region.name}\n            onClick={handleClick}\n            className=\"popup\"\n          >{`${region.niceName} - ${region.name}`}</p>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default PopUp;\n","import React, { useState } from 'react';\nimport { VectorMap } from '@south-paw/react-vector-maps';\nimport PopUp from '../common/PopUp';\nimport world from '../../data/worldMap.json';\nimport './Map.css';\n\nfunction Map(props) {\n  const [mousePosition, setMousePosition] = useState();\n  const [showPopup, setShowPopup] = useState(false);\n\n  // For each layer of the map add an onclick function that sets the clicked country state to the\n  // country name\n  const layerProps = {\n    onClick: ({ target }) =>\n      props.setClickedCountry({\n        name: target.attributes.name.value,\n        code: target.attributes.id.value,\n      }),\n  };\n\n  // If the user clicks anywhere in the map div store the point in time mouse coordinates and show\n  // the popup component\n  function onClick(event) {\n    // Only fire event if the click is not on the popup box\n    if (!event.target.classList.contains('popup')) {\n      setMousePosition({\n        x: event.nativeEvent.offsetX,\n        y: event.nativeEvent.offsetY,\n      });\n      setShowPopup(true);\n    } \n  }\n\n  return (\n    <div className=\"map\" onClick={onClick}>\n      <VectorMap {...world} layerProps={layerProps} />\n      {showPopup && (\n        <PopUp\n          mousePosition={mousePosition}\n          clickedCountry={props.clickedCountry}\n          clickedRegion={props.clickedRegion}\n          setClickedRegion={props.setClickedRegion}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default Map;\n","async function getAwsIpRanges(region) {\n  const res = await fetch('https://ip-ranges.amazonaws.com/ip-ranges.json');\n  const data = await res.json();\n\n  // Get the v4 and v6 IPs for the specified region\n  let ipv4 = filterByRegion(data, region, 'ipv4');\n  let ipv6 = filterByRegion(data, region, 'ipv6');\n\n  // Add a type identifier to each ip\n  ipv4 = addType(ipv4, 'ipv4');\n  ipv6 = addType(ipv6, 'ipv6');\n\n  // Combine ip lists and return them with a row number prefix\n  return addRowNo([...ipv4, ...ipv6]);\n}\n\nfunction filterByRegion(data, region, type) {\n  if (type === 'ipv4')\n    return data.prefixes.filter((prefix) => prefix.region === region);\n  if (type === 'ipv6')\n    return data.ipv6_prefixes.filter((prefix) => prefix.region === region);\n}\n\nfunction addType(data, type) {\n  const dataWithType = data.map((prefix) => ({ ...prefix, type: type }));\n\n  return dataWithType;\n}\n\nfunction addRowNo(data) {\n  let count = 0;\n  const dataWithRowNo = data.map((prefix) => {\n    count++;\n    return { no: count, ...prefix };\n  });\n\n  return dataWithRowNo;\n}\n\nexport default getAwsIpRanges;\n","import React, { useEffect, useState } from 'react';\nimport getAwsIpRanges from '../../data/getAwsIpRanges';\nimport './RegionIpList.css';\nimport { v4 as uuidv4 } from 'uuid';\n\nfunction RegionIpList(props) {\n  const [regionIpData, setRegionIpData] = useState();\n\n  useEffect(() => {\n    async function setData() {\n      setRegionIpData(await getAwsIpRanges(props.region));\n    }\n\n    setData();\n  }, [props.region]);\n\n  return (\n    <div className=\"region-ip-list-container\">\n      <table className=\"region-ip-list-table\" ref={props.regionIpListRef}>\n        <thead>\n          <tr>\n            <th>no.</th>\n            <th>type</th>\n            <th>ip_prefix</th>\n            <th>region</th>\n            <th>service</th>\n            <th>network_border_group</th>\n          </tr>\n        </thead>\n        <tbody>\n          {regionIpData && (\n            <React.Fragment>\n              {regionIpData.map((ip) => {\n                return (\n                  <tr key={uuidv4()}>\n                    <td>{ip.no}</td>\n                    <td>{ip.type}</td>\n                    <td>{ip.ip_prefix || ip.ipv6_prefix}</td>\n                    <td>{ip.region}</td>\n                    <td>{ip.service}</td>\n                    <td>{ip.network_border_group }</td>\n                  </tr>\n                );\n              })}\n            </React.Fragment>\n          )}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default RegionIpList;\n","import React, { useEffect, useRef, useState } from 'react';\nimport Map from '../map/Map';\nimport RegionIPList from '../regions/RegionIpList';\nimport './MapPage.css';\nimport regions from '../../data/awsRegions';\n\nfunction MapPage() {\n  const [clickedCountry, setClickedCountry] = useState();\n  const [clickedRegion, setClickedRegion] = useState();\n  const regionIpListRef = useRef();\n\n  useEffect(() => {\n    if (clickedRegion) regionIpListRef.current.scrollIntoView({ behavior: 'smooth' });\n  }, [clickedRegion]);\n\n  return (\n    <div className=\"map-page-container\">\n      <p className=\"map-intro-para\">\n        Countries with at least one AWS region are highlighted in blue, click a\n        highlighted country to see list of AWS regions. Clicking a region will\n        return a list of IPs.\n      </p>\n      <Map\n        clickedCountry={clickedCountry}\n        setClickedCountry={setClickedCountry}\n        clickedRegion={clickedRegion}\n        setClickedRegion={setClickedRegion}\n      />\n      {clickedRegion && (\n        <div>\n          <h1>{`${clickedCountry.name} - ${clickedRegion}`}</h1>\n          <RegionIPList regionIpListRef={regionIpListRef} region={clickedRegion} />\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default MapPage;\n","import React from 'react';\nimport { regions, countries } from '../../data/awsRegions';\nimport './RegionList.css';\n\nfunction RegionList() {\n  return (\n    <div className=\"region-list-grid\">\n      {Object.entries(regions).map(([key, value]) => {\n        return (\n          <div className={`country-grid-item ${key}`}>\n            <h2>{countries[key]}</h2>\n            {value.map((region) => {\n              return <p>{`${region.niceName} - ${region.name} `}</p>;\n            })}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default RegionList;\n","import React from 'react';\nimport RegionList from '../regions/RegionList';\nimport './ListPage.css'\n\nfunction ListPage() {\n  return (\n    <div className=\"list-page-container\">\n      <RegionList />\n    </div>\n  );\n}\n\nexport default ListPage;\n","// import { useEffect, useState } from 'react';\nimport './App.css';\nimport Navbar from './components/common/Navbar';\nimport MapPage from './components/pages/MapPage';\nimport ListPage from './components/pages/ListPage';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nfunction App() {\n  return (\n    <div>\n      <Router>\n        <Navbar />\n        <Switch>\n          <Route path=\"/aws-regions/\" exact component={MapPage} />\n          <Route path=\"/aws-regions/map\" exact component={MapPage} />\n          <Route path=\"/aws-regions/list\" exact component={ListPage} />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}