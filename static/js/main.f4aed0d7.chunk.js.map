{"version":3,"sources":["components/common/Navbar.jsx","components/map/Map.jsx","data/getAwsIpRanges.js","components/regions/RegionIpList.jsx","App.js","index.js"],"names":["Navbar","className","href","Map","world","region","a","fetch","res","json","data","ipv4","filterByRegion","ipv6","addType","addRowNo","type","prefixes","filter","prefix","ipv6_prefixes","map","count","no","getAwsIpRanges","RegionIpList","props","useState","regionIpData","setRegionIpData","useEffect","setData","Fragment","ip","ip_prefix","ipv6_prefix","service","network_border_group","uuidv4","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+7gHAeeA,MAZf,WACE,OACE,sBAAKC,UAAU,SAAf,UACE,mBAAGC,KAAK,GAAR,SAAW,4CACX,qBAAKD,UAAU,QAAf,SACE,kDAEF,mBAAGC,KAAK,GAAR,SAAW,iD,6BCGFC,MARf,WACE,OACE,qBAAKF,UAAU,MAAf,SACE,cAAC,YAAD,eAAeG,O,kFCRrB,WAA8BC,GAA9B,qBAAAC,EAAA,sEACoBC,MAAM,kDAD1B,cACQC,EADR,gBAEqBA,EAAIC,OAFzB,cAEQC,EAFR,OAKMC,EAAOC,EAAeF,EAAML,EAAQ,QACpCQ,EAAOD,EAAeF,EAAML,EAAQ,QAGxCM,EAAOG,EAAQH,EAAM,QACrBE,EAAOC,EAAQD,EAAM,QAVvB,kBAaSE,EAAS,GAAD,mBAAKJ,GAAL,YAAcE,MAb/B,6C,sBAgBA,SAASD,EAAeF,EAAML,EAAQW,GACpC,MAAa,SAATA,EACKN,EAAKO,SAASC,QAAO,SAACC,GAAD,OAAYA,EAAOd,SAAWA,KAC/C,SAATW,EACKN,EAAKU,cAAcF,QAAO,SAACC,GAAD,OAAYA,EAAOd,SAAWA,UADjE,EAIF,SAASS,EAAQJ,EAAMM,GAGrB,OAFqBN,EAAKW,KAAI,SAACF,GAAD,mBAAC,eAAiBA,GAAlB,IAA0BH,KAAMA,OAKhE,SAASD,EAASL,GAChB,IAAIY,EAAQ,EAMZ,OALsBZ,EAAKW,KAAI,SAACF,GAE9B,OADAG,IACO,aAAEC,GAAID,GAAUH,MAMZK,M,4DCaAC,MA/Cf,SAAsBC,GAAQ,IAAD,EACaC,qBADb,mBACpBC,EADoB,KACNC,EADM,KAW3B,OARAC,qBAAU,WAAM,4CACd,sBAAAxB,EAAA,kEACEuB,EADF,SACwBL,EAAe,aADvC,8EADc,uBAAC,WAAD,wBAKdO,KACC,IAGD,qBAAK9B,UAAU,2BAAf,SACE,wBAAOA,UAAU,uBAAjB,UACE,gCACE,+BACE,qCACA,sCACA,2CACA,wCACA,yCACA,2DAGJ,gCACG2B,GACC,cAAC,IAAMI,SAAP,UACGJ,EAAaP,KAAI,SAACY,GACjB,OACE,+BACE,6BAAKA,EAAGV,KACR,6BAAKU,EAAGjB,OACR,6BAAKiB,EAAGC,WAAaD,EAAGE,cACxB,6BAAKF,EAAG5B,SACR,6BAAK4B,EAAGG,UACR,6BAAKH,EAAGI,yBANDC,4BCjBZC,MAVf,WACE,OACE,gCACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,QCRNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.f4aed0d7.chunk.js","sourcesContent":["import React from 'react';\nimport './Navbar.css';\n\nfunction Navbar() {\n  return (\n    <div className=\"navbar\">\n      <a href=\"\"><h3>Map View</h3></a>\n      <div className=\"title\">\n        <h1>AWS Region IPs</h1>\n      </div>\n      <a href=\"\"><h3>List View</h3></a>\n    </div>\n  );\n}\n\nexport default Navbar;\n","import React from 'react';\nimport { VectorMap } from '@south-paw/react-vector-maps';\nimport world from '../../data/worldMap.json';\nimport './Map.css';\n\nfunction Map() {\n  return (\n    <div className=\"map\">\n      <VectorMap {...world} />\n    </div>\n  );\n}\n\nexport default Map;\n","async function getAwsIpRanges(region) {\n  const res = await fetch('https://ip-ranges.amazonaws.com/ip-ranges.json');\n  const data = await res.json();\n\n  // Get the v4 and v6 IPs for the specified region\n  let ipv4 = filterByRegion(data, region, 'ipv4');\n  let ipv6 = filterByRegion(data, region, 'ipv6');\n\n  // Add a type identifier to each ip\n  ipv4 = addType(ipv4, 'ipv4');\n  ipv6 = addType(ipv6, 'ipv6');\n\n  // Combine ip lists and return them with a row number prefix\n  return addRowNo([...ipv4, ...ipv6]);\n}\n\nfunction filterByRegion(data, region, type) {\n  if (type === 'ipv4')\n    return data.prefixes.filter((prefix) => prefix.region === region);\n  if (type === 'ipv6')\n    return data.ipv6_prefixes.filter((prefix) => prefix.region === region);\n}\n\nfunction addType(data, type) {\n  const dataWithType = data.map((prefix) => ({ ...prefix, type: type }));\n\n  return dataWithType;\n}\n\nfunction addRowNo(data) {\n  let count = 0;\n  const dataWithRowNo = data.map((prefix) => {\n    count++;\n    return { no: count, ...prefix };\n  });\n\n  return dataWithRowNo;\n}\n\nexport default getAwsIpRanges;\n","import React, { useEffect, useState } from 'react';\nimport getAwsIpRanges from '../../data/getAwsIpRanges';\nimport './RegionIpList.css';\nimport { v4 as uuidv4 } from 'uuid';\n\nfunction RegionIpList(props) {\n  const [regionIpData, setRegionIpData] = useState();\n\n  useEffect(() => {\n    async function setData() {\n      setRegionIpData(await getAwsIpRanges('eu-west-1'));\n    }\n\n    setData();\n  }, []);\n\n  return (\n    <div className=\"region-ip-list-container\">\n      <table className=\"region-ip-list-table\">\n        <thead>\n          <tr>\n            <th>no.</th>\n            <th>type</th>\n            <th>ip_prefix</th>\n            <th>region</th>\n            <th>service</th>\n            <th>network_border_group</th>\n          </tr>\n        </thead>\n        <tbody>\n          {regionIpData && (\n            <React.Fragment>\n              {regionIpData.map((ip) => {\n                return (\n                  <tr key={uuidv4()}>\n                    <td>{ip.no}</td>\n                    <td>{ip.type}</td>\n                    <td>{ip.ip_prefix || ip.ipv6_prefix}</td>\n                    <td>{ip.region}</td>\n                    <td>{ip.service}</td>\n                    <td>{ip.network_border_group }</td>\n                  </tr>\n                );\n              })}\n            </React.Fragment>\n          )}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default RegionIpList;\n","// import { useEffect, useState } from 'react';\nimport './App.css';\nimport Navbar from './components/common/Navbar'\nimport Map from './components/map/Map'\nimport RegionIpList from './components/regions/RegionIpList';\n\n\nfunction App() {\n  return (\n    <div>\n      <Navbar />\n      <Map />\n      <RegionIpList />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}